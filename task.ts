console.log("–ü–æ—á–∞—Ç–æ–∫...");

const {
  Connection,
  Keypair,
  clusterApiUrl,
} = require('@solana/web3.js');
const {
  createMint,
  getOrCreateAssociatedTokenAccount,
  mintTo,
  transfer,
} = require('@solana/spl-token');

const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');

const payer = Keypair.generate();        // —Ö—Ç–æ —Å—Ç–≤–æ—Ä—é—î —Ç–æ–∫–µ–Ω–∏
const recipient = Keypair.generate();    // —Ö—Ç–æ –æ—Ç—Ä–∏–º–∞—î —Ç–æ–∫–µ–Ω–∏

async function main() {
  console.log("Airdrop 2 SOL to payer...");
  const airdropSig = await connection.requestAirdrop(payer.publicKey, 2e9);
  await connection.confirmTransaction(airdropSig);

  console.log("Creating new token...");
  const mint = await createMint(
    connection,
    payer,
    payer.publicKey,
    null,
    9 // decimals
  );

  const payerTokenAccount = await getOrCreateAssociatedTokenAccount(
    connection,
    payer,
    mint,
    payer.publicKey
  );

  const recipientTokenAccount = await getOrCreateAssociatedTokenAccount(
    connection,
    payer,
    mint,
    recipient.publicKey
  );

  console.log(`Minting 100 tokens to payer...`);
  await mintTo(
    connection,
    payer,
    mint,
    payerTokenAccount.address,
    payer.publicKey,
    100e9 // 100 —Ç–æ–∫–µ–Ω—ñ–≤ –∑ 9 –∑–Ω–∞–∫–∞–º–∏
  );

  console.log(`üì¶ Transferring 1 token to recipient...`);
  await transfer(
    connection,
    payer,
    payerTokenAccount.address,
    recipientTokenAccount.address,
    payer.publicKey,
    1e9 // 1 —Ç–æ–∫–µ–Ω
  );

  console.log("Token —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ!");
}

main().catch(console.error);

